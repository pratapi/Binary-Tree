// Create Mirror Tree of Binary Tree
/*
Logic :
1.  Call Mirror for left-subtree    i.e., Mirror(left-subtree)
2.  Call Mirror for right-subtree  i.e., Mirror(right-subtree)
3.  Swap left and right subtrees.
          temp = left-subtree
          left-subtree = right-subtree
          right-subtree = temp
*/
#include <iostream>
#include <queue>
using namespace std;

struct TNode
{
	TNode * left;
	TNode * right;
	int data;
};

TNode * newNode(const int &data)
{
	TNode* tmp = new TNode;
	tmp->data = data;
	tmp->left = nullptr;
	tmp->right = nullptr;
	return tmp;
}

void mirror(TNode * node )
{
	if (node == nullptr)
		return;
	else
	{
		TNode* tmp;

		mirror(node->left);
		mirror(node->right);

		tmp = node->left;
		node->left = node->right;
		node->right = tmp;
	}
}

void inOrder(TNode * node)
{
	if (node == nullptr)
		return;
	inOrder(node->left);
	printf("  %d  ", node->data);
	inOrder(node->right);
}

/* Diver function to test above function */
int main()
{
	TNode * root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);

	inOrder(root);

	mirror(root);

	printf("\n");
	inOrder(root);

	return 0;
}
