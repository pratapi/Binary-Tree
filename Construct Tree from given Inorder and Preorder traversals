// Construct Tree from given Inorder and Preorder traversals
/* Logic:
1. in Preorder traversal first element always gives you the root.
    in order : 10 30 40 50 60 70 90 
    pre order : 50 30 10 40 70 60 90

    50 : root
2. Now u know the left sub tree and right sub tree
              50
 In:  10 30 40  60 70 90
 Pre: 30 10 40  70 60 90

 3. Repeat the Process
*/

#include <iostream>
using namespace std;

typedef struct node
{
    struct node * left;
    struct node* right;
    int data;
} Node;

int curr = 0;
Node * createBinaryTree(int * inorder, int * preorder, int start, int end)
{
    Node* root = new Node();
    int rootdata = preorder[curr++];

    root->data = rootdata;

    if (start > end)
    {
        return NULL;
    }
    if (start == end)
    {
        root->left = NULL;
        root->right = NULL;
        return root;
    }

    int i = 0;
    for (i = start; i<end; i++)
    {
        if (inorder[i] == rootdata)
            break;
    }
    root->left = createBinaryTree(inorder, preorder, start, i - 1);
    root->right = createBinaryTree(inorder, preorder, i + 1, end);
    return root;
}

void print(Node* root)
{
    if (root == NULL)
        return;
    print(root->left);
    printf_s(" %d , ", root->data);
    print(root->right);
}

int main()
{
    int inOrder[] = { 10, 30, 40, 50, 60, 70, 90 };
    int preOrder[] = { 50, 30, 10, 40, 70, 60, 90 };
    int len = sizeof(inOrder) / sizeof(inOrder[0]);

    print(createBinaryTree(inOrder, preOrder, 0, len - 1));

    return 0;
}
